from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–º–µ—Ç–æ–∫
notes = []

# –ö–æ–º–∞–Ω–¥–∞ /start —Å Reply Keyboard
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["/list", "/list_buttons"],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        ["/delete", "/clear"],       # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        ["/search", "/help"]         # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º  
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏  
/list_buttons - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è  
/delete [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–º–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: /delete 1)  
/clear - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏  
/search [—Ç–µ–∫—Å—Ç] - –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ (–ø—Ä–∏–º–µ—Ä: /search –ø–æ–∫—É–ø–∫–∏)  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:  
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É!
    """
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /menu —Å Inline Keyboard
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫", callback_data="list_notes")],
        [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="clear_notes")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline Keyboard
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "list_notes":
        if not notes:
            await query.edit_message_text("–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            response = "\n\n".join([f"{i+1}. {n}" for i, n in enumerate(notes)])
            await query.edit_message_text(f"–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫:\n\n{response}")
    elif query.data == "clear_notes":
        notes.clear()
        await query.edit_message_text("–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã!")
    elif query.data == "help":
        help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º  
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏  
/list_buttons - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è  
/delete [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–º–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: /delete 1)  
/clear - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏  
/search [—Ç–µ–∫—Å—Ç] - –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ (–ø—Ä–∏–º–µ—Ä: /search –ø–æ–∫—É–ø–∫–∏)  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:  
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É!
        """
        await query.edit_message_text(help_text)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    notes.append(text)
    await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –°–µ–π—á–∞—Å —É —Ç–µ–±—è {len(notes)} –∑–∞–º–µ—Ç–æ–∫.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not notes:
        await update.message.reply_text("–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        response = "\n\n".join([f"{i+1}. {n}" for i, n in enumerate(notes)])
        await update.message.reply_text(response)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
async def delete_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        note_index = int(context.args[0]) - 1
        if 0 <= note_index < len(notes):
            deleted_note = notes.pop(note_index)
            await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_note}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete 1")

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
async def clear_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    notes.clear()
    await update.message.reply_text("–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")

# –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
async def search_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /search –∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ")
        return
    
    matching_notes = [f"{i+1}. {note}" for i, note in enumerate(notes) if query.lower() in note.lower()]
    if matching_notes:
        response = "\n\n".join(matching_notes)
        await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ:\n\n{response}")
    else:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app = ApplicationBuilder().token("7022082873:AAF5F-IjhfnYwDZ14uT7IaYXDWxLV3xFDt0").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CommandHandler("list", list_notes))
app.add_handler(CommandHandler("delete", delete_note))
app.add_handler(CommandHandler("clear", clear_notes))
app.add_handler(CommandHandler("search", search_notes))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_note))
app.add_handler(CallbackQueryHandler(handle_callback))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app.run_polling()

