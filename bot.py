import os
import aiosqlite
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

DB_PATH = "notes.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS notes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                text TEXT NOT NULL
            )
        """)
        await db.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["/list", "/list_buttons"],
        ["/delete", "/clear"],
        ["/search", "/help"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º  
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏  
/list_buttons - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è  
/delete [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–º–µ—Ç–∫—É (–ø—Ä–∏–º–µ—Ä: /delete 1)  
/clear - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏  
/search [—Ç–µ–∫—Å—Ç] - –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ (–ø—Ä–∏–º–µ—Ä: /search –ø–æ–∫—É–ø–∫–∏)  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:  
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É!
    """
    await update.message.reply_text(help_text)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO notes (user_id, text) VALUES (?, ?)", (user_id, text))
        await db.commit()
        cursor = await db.execute("SELECT COUNT(*) FROM notes WHERE user_id = ?", (user_id,))
        count = (await cursor.fetchone())[0]
    await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –°–µ–π—á–∞—Å —É —Ç–µ–±—è {count} –∑–∞–º–µ—Ç–æ–∫.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, text FROM notes WHERE user_id = ?", (user_id,))
        notes = await cursor.fetchall()
    if not notes:
        await update.message.reply_text("–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        response = "\n\n".join([f"{i+1}. {n[1]}" for i, n in enumerate(notes)])
        await update.message.reply_text(response)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
async def delete_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        note_index = int(context.args[0]) - 1
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT id FROM notes WHERE user_id = ?", (user_id,))
            notes = await cursor.fetchall()
            if 0 <= note_index < len(notes):
                note_id = notes[note_index][0]
                await db.execute("DELETE FROM notes WHERE id = ?", (note_id,))
                await db.commit()
                await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete 1")

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
async def clear_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM notes WHERE user_id = ?", (user_id,))
        await db.commit()
    await update.message.reply_text("–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")

# –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
async def search_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /search –∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ")
        return
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT text FROM notes WHERE user_id = ? AND LOWER(text) LIKE ?", (user_id, f"%{query.lower()}%"))
        notes = await cursor.fetchall()
    if notes:
        response = "\n\n".join([f"{i+1}. {n[0]}" for i, n in enumerate(notes)])
        await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ:\n\n{response}")
    else:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")

# Inline Keyboard –∏ CallbackQueryHandler –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –ø–µ—Ä–µ–¥–∞–≤–∞—è user_id

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("list", list_notes))
app.add_handler(CommandHandler("delete", delete_note))
app.add_handler(CommandHandler("clear", clear_notes))
app.add_handler(CommandHandler("search", search_notes))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_note))
# –î–æ–±–∞–≤—å—Ç–µ CallbackQueryHandler –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(init_db())
    app.run_polling()
